{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar badgin = _interopRequireWildcard(require(\"badgin\"));\n\nvar _uuid = require(\"uuid\");\n\nvar _ExponentNotificationsHelper = require(\"./ExponentNotificationsHelper.web\");\n\nrequire(\"./ExponentNotifications.fx.web\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar currentBadgeNumber = 0;\n\nfunction transformLocalNotification(notification, tag) {\n  var _notification$web = notification.web,\n      web = _notification$web === void 0 ? {} : _notification$web,\n      abstractNotification = (0, _objectWithoutProperties2.default)(notification, [\"web\"]);\n  tag = web.tag || tag;\n  var nativeNotification = (0, _extends2.default)({}, abstractNotification, {\n    tag: tag\n  }, web, {\n    _isLocal: true\n  });\n  return [nativeNotification.title, nativeNotification];\n}\n\nfunction getRegistrationAsync() {\n  var registration;\n  return _regenerator.default.async(function getRegistrationAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          (0, _ExponentNotificationsHelper.guardPermission)();\n          _context.next = 3;\n          return _regenerator.default.awrap(navigator.serviceWorker.getRegistration());\n\n        case 3:\n          registration = _context.sent;\n\n          if (registration) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new Error('Failed to get notification registration!');\n\n        case 6:\n          return _context.abrupt(\"return\", registration);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getNotificationsAsync(tag) {\n  var registration, notifications;\n  return _regenerator.default.async(function getNotificationsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regenerator.default.awrap(getRegistrationAsync());\n\n        case 2:\n          registration = _context2.sent;\n          _context2.next = 5;\n          return _regenerator.default.awrap(registration.getNotifications(tag ? {\n            tag: tag\n          } : undefined));\n\n        case 5:\n          notifications = _context2.sent;\n          return _context2.abrupt(\"return\", notifications);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar _default = {\n  presentLocalNotification: function presentLocalNotification(notification) {\n    return function _callee() {\n      var registration, tag;\n      return _regenerator.default.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regenerator.default.awrap(getRegistrationAsync());\n\n            case 2:\n              registration = _context3.sent;\n              tag = (0, _uuid.v4)();\n              registration.showNotification.apply(registration, (0, _toConsumableArray2.default)(transformLocalNotification(notification, tag)));\n              return _context3.abrupt(\"return\", tag);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  scheduleLocalNotification: function scheduleLocalNotification(notification) {\n    var _arguments = arguments,\n        _this = this;\n\n    return function _callee2() {\n      var options, registration, tag, intervalMs;\n      return _regenerator.default.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n\n              if (!options.intervalMs) {\n                _context4.next = 10;\n                break;\n              }\n\n              _context4.next = 4;\n              return _regenerator.default.awrap(getRegistrationAsync());\n\n            case 4:\n              registration = _context4.sent;\n              tag = (0, _uuid.v4)();\n              setTimeout(function () {\n                registration.showNotification.apply(registration, (0, _toConsumableArray2.default)(transformLocalNotification(notification, tag)));\n              }, options.intervalMs);\n              return _context4.abrupt(\"return\", tag);\n\n            case 10:\n              if (!options.time) {\n                _context4.next = 15;\n                break;\n              }\n\n              intervalMs = options.time - Date.now();\n\n              if (!(intervalMs < 0)) {\n                _context4.next = 14;\n                break;\n              }\n\n              throw new Error('Expo.Notifications.scheduleLocalNotification(): options.time must be some time in the future.');\n\n            case 14:\n              return _context4.abrupt(\"return\", _this.scheduleLocalNotification(notification, {\n                intervalMs: intervalMs\n              }));\n\n            case 15:\n              throw new Error(\"Expo.Notifications.scheduleLocalNotification() options \" + JSON.stringify(options, null, 2) + \" are not supported yet.\");\n\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  dismissNotification: function dismissNotification(notificationId) {\n    return function _callee3() {\n      var notifications, _iterator, _step, notification;\n\n      return _regenerator.default.async(function _callee3$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regenerator.default.awrap(getNotificationsAsync(notificationId));\n\n            case 2:\n              notifications = _context5.sent;\n\n              for (_iterator = _createForOfIteratorHelperLoose(notifications); !(_step = _iterator()).done;) {\n                notification = _step.value;\n                notification.close();\n              }\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  dismissAllNotifications: function dismissAllNotifications() {\n    var _this2 = this;\n\n    return function _callee4() {\n      return _regenerator.default.async(function _callee4$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _this2.dismissNotification();\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  cancelScheduledNotificationAsync: function cancelScheduledNotificationAsync(notificationId) {\n    var _this3 = this;\n\n    return function _callee5() {\n      return _regenerator.default.async(function _callee5$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _this3.dismissNotification(notificationId);\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  cancelAllScheduledNotificationsAsync: function cancelAllScheduledNotificationsAsync() {\n    var _this4 = this;\n\n    return function _callee6() {\n      return _regenerator.default.async(function _callee6$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _this4.dismissNotification();\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getExponentPushTokenAsync: function getExponentPushTokenAsync() {\n    return function _callee7() {\n      return _regenerator.default.async(function _callee7$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _regenerator.default.awrap((0, _ExponentNotificationsHelper.getExponentPushTokenAsync)());\n\n            case 2:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getDevicePushTokenAsync: function getDevicePushTokenAsync() {\n    return function _callee8() {\n      return _regenerator.default.async(function _callee8$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regenerator.default.awrap((0, _ExponentNotificationsHelper.getDevicePushTokenAsync)());\n\n            case 2:\n              return _context10.abrupt(\"return\", _context10.sent);\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getBadgeNumberAsync: function getBadgeNumberAsync() {\n    return function _callee9() {\n      return _regenerator.default.async(function _callee9$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt(\"return\", currentBadgeNumber);\n\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setBadgeNumberAsync: function setBadgeNumberAsync(badgeNumber) {\n    return function _callee10() {\n      return _regenerator.default.async(function _callee10$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              currentBadgeNumber = badgeNumber;\n              badgin.set(badgeNumber);\n\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};\nexports.default = _default;","map":{"version":3,"sources":["../../src/Notifications/ExponentNotifications.web.ts"],"names":[],"mappings":"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","sourcesContent":["import * as badgin from 'badgin';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  guardPermission,\n  getExponentPushTokenAsync,\n  getDevicePushTokenAsync,\n} from './ExponentNotificationsHelper.web';\nimport { LocalNotification, LocalNotificationId } from './Notifications.types';\n\n// Register `message`'s event listener (side-effect)\nimport './ExponentNotifications.fx.web';\n\nlet currentBadgeNumber = 0;\n\nfunction transformLocalNotification(\n  notification: LocalNotification,\n  tag: string\n): [string, NotificationOptions] {\n  const { web = {}, ...abstractNotification } = notification;\n  tag = web.tag || tag;\n  const nativeNotification = {\n    ...abstractNotification,\n    tag,\n    ...web,\n    // Show that this notification is a local notification\n    _isLocal: true,\n  };\n  return [nativeNotification.title, nativeNotification];\n}\n\nasync function getRegistrationAsync(): Promise<ServiceWorkerRegistration> {\n  guardPermission();\n  const registration = await navigator.serviceWorker.getRegistration();\n  if (!registration) {\n    throw new Error('Failed to get notification registration!');\n  }\n  return registration;\n}\n\nasync function getNotificationsAsync(tag?: string): Promise<Notification[]> {\n  const registration = await getRegistrationAsync();\n  const notifications = await registration.getNotifications(tag ? { tag } : undefined);\n  return notifications;\n}\n\nexport default {\n  async presentLocalNotification(notification: LocalNotification): Promise<LocalNotificationId> {\n    const registration = await getRegistrationAsync();\n    const tag = uuidv4();\n    registration.showNotification(...transformLocalNotification(notification, tag));\n    return tag;\n  },\n  async scheduleLocalNotification(\n    notification: any,\n    options: {\n      time?: Date | number;\n      repeat?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n      intervalMs?: number;\n    } = {}\n  ): Promise<string> {\n    if (options.intervalMs) {\n      const registration = await getRegistrationAsync();\n      const tag = uuidv4();\n      setTimeout(() => {\n        registration.showNotification(...transformLocalNotification(notification, tag));\n      }, options.intervalMs);\n      return tag;\n    } else if (options.time) {\n      const intervalMs = (options.time as number) - Date.now();\n      if (intervalMs < 0) {\n        throw new Error(\n          'Expo.Notifications.scheduleLocalNotification(): options.time must be some time in the future.'\n        );\n      }\n      return this.scheduleLocalNotification(notification, {\n        intervalMs,\n      });\n    }\n    throw new Error(\n      `Expo.Notifications.scheduleLocalNotification() options ${JSON.stringify(\n        options,\n        null,\n        2\n      )} are not supported yet.`\n    );\n  },\n\n  async dismissNotification(notificationId?: string): Promise<void> {\n    const notifications = await getNotificationsAsync(notificationId);\n    for (const notification of notifications) {\n      notification.close();\n    }\n  },\n  async dismissAllNotifications(): Promise<void> {\n    this.dismissNotification();\n  },\n  async cancelScheduledNotificationAsync(notificationId: string): Promise<void> {\n    this.dismissNotification(notificationId);\n  },\n  async cancelAllScheduledNotificationsAsync(): Promise<void> {\n    this.dismissNotification();\n  },\n\n  async getExponentPushTokenAsync(): Promise<string> {\n    return await getExponentPushTokenAsync();\n  },\n\n  async getDevicePushTokenAsync(): Promise<{ type: string; data: object }> {\n    return await getDevicePushTokenAsync();\n  },\n\n  async getBadgeNumberAsync(): Promise<number> {\n    return currentBadgeNumber;\n  },\n\n  async setBadgeNumberAsync(badgeNumber: number): Promise<void> {\n    currentBadgeNumber = badgeNumber;\n    badgin.set(badgeNumber);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}